/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bfst22.vector;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

class AppTest {
    @Test void appHasAGreeting() {
        
    }

    @Test void testAdressParser() {
        String input = "Aalborgvej 1, 1647 Aalborg";
        assertEquals("Aalborg", AdressParser.parse(input).getCity());
        assertEquals("Aalborgvej", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("1647", AdressParser.parse(input).getPostcode());
    }

    //testAdressParser with input = "Rued Langgaardsvej 7, 2300 København S"
    @Test void testAdressParser2() {
        String input = "Rued Langgaardsvej 7, 2300 København S";
        assertEquals("København S", AdressParser.parse(input).getCity());
        assertEquals("Rued Langgaardsvej", AdressParser.parse(input).getStreet());
        assertEquals("7", AdressParser.parse(input).getHouse());
        assertEquals("2300", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Ungnubulla 73, 8392 Solrød"
    @Test void testAdressParser3() {
        String input = "Ungnubulla 73, 8392 Solrød";
        assertEquals("Solrød", AdressParser.parse(input).getCity());
        assertEquals("Ungnubulla", AdressParser.parse(input).getStreet());
        assertEquals("73", AdressParser.parse(input).getHouse());
        assertEquals("8392", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Vestergade 1, 2100 København V"
    @Test void testAdressParser4() {
        String input = "Vestergade 1, 2100 København V";
        assertEquals("København V", AdressParser.parse(input).getCity());
        assertEquals("Vestergade", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("2100", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Ibstrupvænget 7, 2820 Gentofte"
    @Test void testAdressParser5() {
        String input = "Ibstrupvænget 7, 2820 Gentofte";
        assertEquals("Gentofte", AdressParser.parse(input).getCity());
        assertEquals("Ibstrupvænget", AdressParser.parse(input).getStreet());
        assertEquals("7", AdressParser.parse(input).getHouse());
        assertEquals("2820", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Kongens Nytorv 1, 2100 København V"
    @Test void testAdressParser6() {
        String input = "Kongens Nytorv 1, 2100 København V";
        assertEquals("København V", AdressParser.parse(input).getCity());
        assertEquals("Kongens Nytorv", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("2100", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Drømmenes Teater 45, 2837 Kongens Lyngby"
    @Test void testAdressParser7() {
        String input = "Drømmenes Teater 45, 2837 Kongens Lyngby";
        assertEquals("Kongens Lyngby", AdressParser.parse(input).getCity());
        assertEquals("Drømmenes Teater", AdressParser.parse(input).getStreet());
        assertEquals("45", AdressParser.parse(input).getHouse());
        assertEquals("2837", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Solstrædet 83, 2340 Torrig Løkken"
    @Test void testAdressParser8() {
        String input = "Solstrædet 83, 2340 Torrig Løkken";
        assertEquals("Torrig Løkken", AdressParser.parse(input).getCity());
        assertEquals("Solstrædet", AdressParser.parse(input).getStreet());
        assertEquals("83", AdressParser.parse(input).getHouse());
        assertEquals("2340", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Bredgade 1, 2000 København V"
    @Test void testAdressParser9() {
        String input = "Bredgade 1, 2000 København V";
        assertEquals("København V", AdressParser.parse(input).getCity());
        assertEquals("Bredgade", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("2000", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "århusvej 1, 1234 aarhus"
    @Test void testAdressParser10() {
        String input = "århusvej 1, 1234 aarhus";
        assertEquals("aarhus", AdressParser.parse(input).getCity());
        assertEquals("århusvej", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("1234", AdressParser.parse(input).getPostcode());
    }
  
    //one testAdressParser with input = "Germanyvej 1, 1234 Berlin"
    @Test void testAdressParser12() {
        String input = "Germanyvej 1, 1234 Berlin";
        assertEquals("Berlin", AdressParser.parse(input).getCity());
        assertEquals("Germanyvej", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("1234", AdressParser.parse(input).getPostcode());
    }

    //one testAdressParser with input = "Spainvej 1, 1234 Madrid"
    @Test void testAdressParser13() {
        String input = "Spainvej 1, 1234 Madrid";
        assertEquals("Madrid", AdressParser.parse(input).getCity());
        assertEquals("Spainvej", AdressParser.parse(input).getStreet());
        assertEquals("1", AdressParser.parse(input).getHouse());
        assertEquals("1234", AdressParser.parse(input).getPostcode());
    }
}

